<?php

/**
 * This is the model base class for the table "{{error}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Error".
 *
 * Columns in table "{{error}}" available as properties of the model,
 * followed by relations of table "{{error}}" available as properties of the model.
 *
 * @property integer $error_id
 * @property string $error_hash_id
 * @property string $information
 * @property integer $is_solved
 * @property integer $error_count
 * @property integer $user_count
 * @property string $last_occurrance_at
 * @property string $last_email_at
 * @property string $created_at
 *
 * @property UserHasError[] $userHasErrors
 */
abstract class BaseError extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{error}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Error|Errors', $n);
	}

	public static function representingColumn() {
		return 'error_hash_id';
	}

	public function rules() {
		return array(
			array('error_hash_id, information', 'required'),
			array('is_solved, error_count, user_count', 'numerical', 'integerOnly'=>true),
			array('error_hash_id', 'length', 'max'=>256),
			array('last_occurrance_at, last_email_at, created_at', 'safe'),
			array('is_solved, error_count, user_count, last_occurrance_at, last_email_at, created_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('error_id, error_hash_id, information, is_solved, error_count, user_count, last_occurrance_at, last_email_at, created_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'userHasErrors' => array(self::HAS_MANY, 'UserHasError', 'error_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'error_id' => Yii::t('app', 'Error'),
			'error_hash_id' => Yii::t('app', 'Error Hash'),
			'information' => Yii::t('app', 'Information'),
			'is_solved' => Yii::t('app', 'Is Solved'),
			'error_count' => Yii::t('app', 'Error Count'),
			'user_count' => Yii::t('app', 'User Count'),
			'last_occurrance_at' => Yii::t('app', 'Last Occurrance At'),
			'last_email_at' => Yii::t('app', 'Last Email At'),
			'created_at' => Yii::t('app', 'Created At'),
			'userHasErrors' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('error_id', $this->error_id);
		$criteria->compare('error_hash_id', $this->error_hash_id, true);
		$criteria->compare('information', $this->information, true);
		$criteria->compare('is_solved', $this->is_solved);
		$criteria->compare('error_count', $this->error_count);
		$criteria->compare('user_count', $this->user_count);
		$criteria->compare('last_occurrance_at', $this->last_occurrance_at, true);
		$criteria->compare('last_email_at', $this->last_email_at, true);
		$criteria->compare('created_at', $this->created_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}